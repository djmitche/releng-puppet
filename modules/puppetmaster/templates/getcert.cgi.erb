#! /usr/bin/perl

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# runs as apache

# This script:
#
# * sanitizes the remote IP and does a reverse-DNS lookup
# * sends email to the puppet_notif_email
# * invokes the setuid script, deployment_getcert.sh

use warnings;
use strict;
use IPC::Open3;
use Symbol qw( gensym );
use Socket;
use POSIX;
use FileHandle;

my $mailto = '<%= scope.lookupvar('::config::puppet_notif_email') %>';

print "Content-Type: text/plain\n\n";

$ENV{'PATH'} = '/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin';

# IP addresses of machines allowed to generate arbitrary certificates
my $manager_ips = [
<% @manager_ips.each do |ip| -%>
    qw/<%= ip %>/,
<% end %>
];
# Allowed networks
my $network_regexps = [
<% @network_regexps.each do |regexp| -%>
    qr/<%= regexp %>/m,
<% end %>
];
# Allowed hostnames
my $fqdn_regexps = [
<% @fqdn_regexps.each do |regexp| -%>
    qr/<%= regexp %>/m,
<% end %>
];

my $ip;
my $generated_by;

if ($ENV{'QUERY_STRING'}){
    # Explicit certificate request
    my $manager_ip = $ENV{'REMOTE_ADDR'};
    die "$manager_ip is not allowed to generate certificates for other hosts" unless grep $_ eq $manager_ip, @$manager_ips;
    $ip = $ENV{'QUERY_STRING'};
    die "Other host must be specified by IP, $ip given" unless $ip =~ /^\d+\.\d+\.\d+\.\d+$/i;
    $generated_by = $manager_ip;
} else {
    # first, find the IP of the remote system.  Note that this does not use any
    # input from that system itself -- Apache sets this variable.
    $ip = $ENV{'REMOTE_ADDR'};
    $generated_by = $ip;
}
inet_aton($ip) or die "Invalid IP: $ip";
# convert to a hostname
my $host = gethostbyaddr(inet_aton($ip), AF_INET) or die "cannot resolve $ip: $!";

die "refused IP: $ip" unless grep $ip =~ /$_/, @$network_regexps;
die "refused FQDN: $host" unless grep $host =~ /$_/, @$fqdn_regexps;

print "echo 'Certificate request for $host'\n";

# start sending mail about this request, so that even if things crash, we still
# get an email
open(my $mail, '|-', '/bin/mail', '-s', "[PuppetAgain Changes] certificate generated for $host", $mailto)
    or die "error sending mail";
$mail->autoflush(1);
print $mail "Creating certificate for $host ($ip) from $generated_by.\n";

# generate the certs, sending stderr to $mail.  This script is run via sudo,
# and also gives us the chance to grab all stderr from the script.
my $pid = open3(gensym, ">&STDOUT", ">&" . fileno($mail), 'sudo', '<%= @deployment_getcert_sh %>', $host, $generated_by);
waitpid($pid, 0);

close $mail or die "while sending mail: $?";
