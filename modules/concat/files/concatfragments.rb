# Script to concat files to a config file.
#
# Given a directory like this:
# /path/to/conf.d
# |-- fragments
# |   |-- 00_named.conf
# |   |-- 10_domain.net
# |   `-- zz_footer
#
# The script supports a test option that will build the concat file to a temp location and
# use /usr/bin/cmp to verify if it should be run or not.  This would result in the concat happening
# twice on each run but gives you the option to have an unless option in your execs to inhibit rebuilds.
#
# Without the test option and the unless combo your services that depend on the final file would end up
# restarting on each run, or in other manifest models some changes might get missed.
#
# OPTIONS:
#  -o	The file to create from the sources
#  -d	The directory where the fragments are kept
#  -t	Test to find out if a build is needed, basically concats the files to a temp
#       location and compare with what's in the final location, return codes are designed
#       for use with unless on an exec resource
#  -w   Add a shell style comment at the top of the created file to warn users that it
#       is generated by puppet
#  -f   Enables the creation of empty output files when no fragments are found
#  -n	Sort the output numerically rather than the default alpha sort
#
# the command:
#
#   concatfragments.rb -o /path/to/conffile.cfg -d /path/to/conf.d
#
# creates /path/to/conf.d/fragments.concat and copies the resulting
# file to /path/to/conffile.cfg.  The files will be sorted alphabetically
# pass the -n switch to sort numerically.
#
# The script does error checking on the various dirs and files to make
# sure things don't fail.

require 'optparse'
require 'pathname'
require 'fileutils'

options = {
    :outfile => '',
    :workdir => '',
    :numericsort => false,
    :warnmsg => '',
    :force => false,
    :test => false
}

optparser = OptionParser.new do |o|
    o.banner = "Usage: concatfragments.rb -o <outfile> -d <fragments_dir>"
    o.separator  ""
    o.separator  "Options"

    o.on('-o', '--outfile FILE', "output file") do |f|
        options[:outfile] = f
    end

    o.on('-d', '--workdir DIR', "work dir") do |d|
        options[:workdir] = d
    end

    o.on('-n', "numericsort") do
        options[:numericsort] = true
    end

    o.on('-w', '--warning-message MSG', "warning message") do |m|
        options[:warnmsg] = m
    end

    o.on('-f', "force") do
        options[:force] = true
    end

    o.on('-t', "test") do
        options[:test] = true
    end

    o.on("-h","--help","help") do
        puts optparser
    end
end

optparser.parse!

def fail(msg)
    puts msg
    exit 1
end

fail "Please specify an output file with -o" if options[:outfile] == ''
outfile = Pathname.new(options[:outfile])
fail "Output file #{outfile} is not writable" if not outfile.writable?

fail "Please specify a workdir with -d" if options[:workdir] == ''
workdir = Pathname.new(options[:workdir])
fail "Workdir #{workdir} does not exist" unless workdir.directory?

options[:fragdir] = File.join(workdir, 'fragments')
fragdir = Pathname.new(options[:fragdir])
fail "Fragments dir #{fragdir} does not exist" unless fragdir.directory?

if not options[:force] and fragdir.children == [] then
    fail "The fragments directory is empty; cowardly refusing to make empty config files"
end

# perform the concatenation

concatfile = File.join(workdir, "fragments.concat")
concat = File.new(concatfile, File::CREAT|File::TRUNC|File::WRONLY)
concat.write "#{options[:warnmsg]}\n" if options[:warnmsg] != ''

children = fragdir.children(false)
if options[:numericsort] then
    # use to_i to get the integer prefix of each filename
    children.map! { |c| [c.to_s.to_i, c] }
    children.sort!
    # strip the integers
    children.map! { |i, c| c }
else
    children.sort!
end

children.each do |c|
    concat.write File.read(File.join(fragdir, c))
end

concat.close

# either test or copy, depending on --test

if options[:test]; then
    exit 1 if not outfile.file?
    exit (if File.read(concatfile) == File.read(outfile) then 0 else 1 end)
else
    FileUtils.cp concatfile, outfile
end
