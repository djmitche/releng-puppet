# -*- python -*-
# ex: set syntax=python:

c = BuildmasterConfig = {}

import passwords
reload(passwords)

linux_slaves = [
    "servo-linux64-ec2-001",
    "servo-linux64-ec2-002",
    "servo-linux64-ec2-003",
    "servo-linux64-ec2-004",
    "servo-linux64-ec2-005",
]
mac_slaves = [
    "servo-lion-r5-001",
    "servo-lion-r5-002",
]
mozharness_repo = 'http://hg.mozilla.org/build/mozharness'
mozharness_revision = 'production'
servo_repo = 'git://github.com/mozilla/servo.git'
# TODO: are there additional tests we want to run on master?
branches = ['auto']

####### BUILDSLAVES
from buildbot.buildslave import BuildSlave
from passwords import SLAVE_PASSWORD

c['slavePortnum'] = 9001
c['slaves'] = []
for s in linux_slaves + mac_slaves:
    c['slaves'].append(BuildSlave(s, SLAVE_PASSWORD, max_builds=1))

####### CHANGESOURCES
from buildbot.changes.gitpoller import GitPoller

c['change_source'] = []
c['change_source'].append(GitPoller(
    servo_repo, workdir='gitpoller-workdir', branches=branches, pollinterval=60
))

####### SCHEDULERS
from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes.filter import ChangeFilter

def bors_filter(c):
    # The "auto" branch is special because it's used to test r+'ed changes.
    # Bors resets this branch often and merges those changes onto it. We only
    # want to test bors' commit to that branch. For any other branch we should
    # test all changes.
    if c.branch == "auto" and "bors" not in c.who:
        return False
    return True

c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(
    name="sched",
    treeStableTimer=None,
    builderNames=["linux", "mac"],
    change_filter=ChangeFilter(filter_fn=bors_filter),
))
c['schedulers'].append(ForceScheduler(
    name="force",
    builderNames=["linux", "mac"]
))

####### BUILDERS
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import WithProperties
from buildbot.steps.shell import ShellCommand, SetProperty
from buildbot.steps.slave import RemoveDirectory
from buildbot.status.results import SUCCESS, WARNINGS, FAILURE, EXCEPTION

def extract_properties(rv, stdout, stderr):
    props = {}
    stdout = stdout.strip()
    for l in filter(None, stdout.split('\n')):
        e = filter(None, l.split(':', 1))
        if len(e) == 2:
            props[e[0]] = e[1].strip()
    return props

def set_status(cmd, step):
    if cmd.rc == 0:
        return SUCCESS
    elif cmd.rc == 1:
        return WARNINGS
    elif cmd.rc == 2:
        return FAILURE
    else:
        return EXCEPTION

factory = BuildFactory()
factory.addStep(RemoveDirectory("properties"))
factory.addStep(ShellCommand(
    name="update-mozharness",
    command=["hgtool.py", "-r", mozharness_revision, mozharness_repo, 'mozharness'],
    workdir=".",
    haltOnFailure=True
))
factory.addStep(ShellCommand(
    command=["python", "mozharness/scripts/servo_build.py", "--repo", servo_repo,
             "--revision", WithProperties("%(revision)s"),
             "--branch", WithProperties("%(branch)s"),
             # Configs don't exist for all platforms
             WithProperties("%(mozharness_config:+--config-file)s"),
             WithProperties("%(mozharness_config)s"),
            ],
    workdir='.',
    log_eval_func=set_status,
    flunkOnWarnings=True,
))
factory.addStep(SetProperty(
    name='set-script-properties',
    command=['bash', '-c', 'for file in `ls -1`; do cat $file; done'],
    workdir='properties',
    extract_fn=extract_properties
))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(BuilderConfig(
    mergeRequests=False,
    name="linux",
    slavenames=linux_slaves,
    factory=factory,
    properties={'mozharness_config': 'servo/linux.py'},
))
c['builders'].append(BuilderConfig(
    mergeRequests=False,
    name="mac",
    slavenames=mac_slaves,
    factory=factory
))

####### STATUS TARGETS
c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz

c['status'].append(html.WebStatus(http_port=8001))
authz_cfg=authz.Authz(
    gracefulShutdown = True,
    forceBuild = True,
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8101, authz=authz_cfg))

####### PROJECT IDENTITY
c['title'] = "Servo"
c['titleURL'] = "http://github.com/mozilla/servo"
c['buildbotURL'] = "http://localhost:8010/"

####### DB URL
import passwords
reload(passwords)
from passwords import BBDB_URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': BBDB_URL,
}
